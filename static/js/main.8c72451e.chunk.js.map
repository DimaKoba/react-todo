{"version":3,"sources":["Components/TaskItem.jsx","Pages/Home.jsx","Pages/Task.jsx","Components/Header.jsx","Components/DefaultLayout.jsx","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","root","maxWidth","TaskItem","task","deleteTask","index","classes","Box","mr","mb","Card","elevation","className","CardActionArea","CardContent","Typography","gutterBottom","variant","component","label","color","text","CardActions","Button","size","onClick","form","marginBottom","formInput","formHeader","Home","useState","setLabel","setText","tasks","setTasks","errorLabel","setErrorLabel","errorText","setErrorText","i","filter","item","useEffect","localStorage","getItem","setItem","JSON","stringify","local","parse","getLocal","Grid","container","onSubmit","e","preventDefault","TextField","onChange","target","value","error","helperText","fullWidth","type","map","Task","theme","flexGrow","menuButton","marginRight","spacing","Header","AppBar","position","Toolbar","IconButton","edge","DefaultLayout","children","p","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8c72451e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { Box } from \"@material-ui/core\";\r\n \r\nconst useStyles = makeStyles({\r\n root: {\r\n   maxWidth: 345\r\n }\r\n});\r\n \r\nexport const TaskItem = ({ task, deleteTask, index }) => {\r\n const classes = useStyles();\r\n\r\n \r\n\r\n return (\r\n   <Box mr={3} mb={3}>\r\n     <Card elevation={3} className={classes.root}>\r\n       <CardActionArea>\r\n         <CardContent>\r\n           <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n             {task.label}\r\n           </Typography>\r\n           <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n             {task.text}\r\n           </Typography>\r\n         </CardContent>\r\n       </CardActionArea>\r\n       <CardActions>\r\n         <Button size=\"small\" color=\"secondary\"\r\n           onClick = { () => deleteTask(index) }\r\n           size='small'\r\n           color='secondary'\r\n         >\r\n           Delete\r\n         </Button>\r\n         <Button size=\"small\" color=\"primary\">\r\n           Go to task\r\n         </Button>\r\n       </CardActions>\r\n     </Card>\r\n   </Box>\r\n );\r\n};\r\n","   import { Typography, TextField, makeStyles, Grid, Button } from \"@material-ui/core\";    \r\n   import { TaskItem } from \"../Components/TaskItem\";    \r\n   import { useState, useEffect } from 'react';\r\n\r\n\r\n   const useStyles = makeStyles({\r\n    form: {\r\n      maxWidth: 500,\r\n      marginBottom: 20\r\n    },\r\n    formInput: {\r\n      marginBottom: 20\r\n    },\r\n    formHeader: {\r\n      marginBottom: 5\r\n    }\r\n   });\r\n\r\n    \r\n   export const Home = () => {\r\n    const classes = useStyles();\r\n\r\n    const [label, setLabel] = useState('');\r\n    const [text, setText] = useState('');\r\n    const [tasks, setTasks] = useState([]);\r\n\r\n    const [errorLabel, setErrorLabel] = useState('');\r\n    const [errorText, setErrorText] = useState('');\r\n\r\n    const addTask = (e) =>{\r\n            e.preventDefault();\r\n          if(label && text){\r\n              const task = {\r\n                  label,\r\n                  text\r\n              };\r\n              setTasks([...tasks, task]);\r\n              setLabel('');\r\n              setText('');\r\n          };\r\n          \r\n          \r\n          if (!label) {\r\n            setErrorLabel('Enter your task');              \r\n          } else {\r\n            setErrorLabel('')\r\n          }\r\n\r\n          if(!text) {\r\n            setErrorText('Enter your task text');\r\n          } else {\r\n            setErrorText('');\r\n          }\r\n    };\r\n\r\n    const deleteTask = (i) => {\r\n        setTasks(tasks.filter((item, index)=> index !== i))\r\n      };\r\n\r\n    const saveLocal = () => localStorage.setItem('tasks', JSON.stringify(tasks));\r\n\r\n    const getLocal = () => {\r\n          if(localStorage.getItem('tasks') === null)  {\r\n            localStorage.setItem('tasks', JSON.stringify([]));\r\n        } else {\r\n            let local = JSON.parse(localStorage.getItem('tasks'));\r\n            setTasks(local);\r\n        }\r\n\r\n    };\r\n\r\n    useEffect(()=>{\r\n        getLocal();\r\n    }, []);\r\n    \r\n    useEffect(()=>{\r\n        saveLocal();\r\n    }, [tasks]);\r\n\r\n    return (\r\n      <Grid container>\r\n        <form onSubmit={addTask} className={classes.form}>\r\n          <Typography className={classes.formHeader} variant=\"h6\">\r\n            Add your tasks\r\n          </Typography>\r\n          <TextField\r\n          onChange = { (e)=> setLabel(e.target.value)}\r\n          value={label}\r\n          className={classes.formInput}\r\n          variant=\"outlined\"\r\n          label=\"Enter task\"\r\n          error = {errorLabel ? true : false}\r\n          helperText = {errorLabel}\r\n          fullWidth          \r\n          />\r\n          <TextField\r\n          onChange = { (e)=> setText(e.target.value)}\r\n          value={text}\r\n          className={classes.formInput}\r\n          variant=\"outlined\"\r\n          label=\"Enter task\"\r\n          error = {errorText ? true : false}\r\n          helperText = {errorText}\r\n          fullWidth          \r\n         \r\n         \r\n         \r\n          />\r\n          <Button type = 'submit' variant=\"contained\" color=\"primary\">\r\n            Add\r\n          </Button>\r\n        </form>\r\n        <Grid container>\r\n         {tasks.map((item, i)=>{ return <TaskItem key={i} deleteTask={deleteTask} task={item} index={i}/>})}\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n   };\r\n    \r\n   ","import React from 'react'\r\n\r\nexport const Task = () => {\r\n    return (\r\n        <div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nexport const Header = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar variant=\"dense\">\r\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" color=\"inherit\">\r\n            To do list\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Header } from \"./Header\";\r\nimport { Grid, Box } from \"@material-ui/core\";\r\n\r\nexport const DefaultLayout = ({ children }) => {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <Grid container>\r\n        <Box p={3}>{children}</Box>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n","import './App.css';\nimport { Home } from './Pages/Home';\nimport { Task } from './Pages/Task';\nimport { DefaultLayout } from './Components/DefaultLayout';\nimport { BrowserRouter, Switch, Route, Link } from 'react-router-dom';\n\nfunction App() {\n  return (\n    \n      <BrowserRouter>\n        <DefaultLayout>\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/task/:id\" component={Task} />\n          </Switch>\n          </DefaultLayout>\n      </BrowserRouter>\n    \n      );\n}\n\n      export default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}